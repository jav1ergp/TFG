import flet as ft
from flet import AppBar, PopupMenuItem, IconButton, PopupMenuButton, Row, Container, Image, Text, Icon, colors, icons, MainAxisAlignment, TextButton, AlertDialog

class NavBar(AppBar):
    def __init__(self, page: ft.Page):
        self.page = page
        self.dlg_modal = AlertDialog(
            modal=True,
            adaptive=True,
            title=Text("Confirmar acción"),
            content=Text("¿Seguro que desea cerrar sesión?"),
            actions=[
                TextButton("Sí", on_click=self.logout),
                TextButton("No", on_click=self.close_dialog)
            ],
            actions_alignment=MainAxisAlignment.END
        )
        
        # Configuración del logo y título
        leading_content = Container(
            on_click=lambda _: self.page.go("/home"),
            content=Row(
                spacing=10,
                alignment=MainAxisAlignment.START,
                controls=[
                    Container(
                        content=Image(
                            src="https://cdn-icons-png.flaticon.com/512/619/619032.png",  # Icono de parking
                            width=40,
                            height=40
                        ),
                        alignment=ft.alignment.center
                    ),
                    Text("Parking Manager", 
                         size=18, 
                         weight="bold", 
                         color="white")
                ]
            )
        )
        
        # Configurar acciones dinámicas
        actions = self.build_responsive_actions()
        
        super().__init__(
            leading=leading_content,
            actions=actions,
            leading_width=120,
            toolbar_height=75,
            bgcolor=ft.colors.BLUE_800  # Color corporativo azul
        )
    
    def build_responsive_actions(self):
        """Construye acciones responsivas según el ancho de pantalla"""
        actions = []
        
        if self.page.window_width < 600:  # Versión móvil
            actions.append(
                PopupMenuButton(
                    icon=Icon(icons.MENU, color="white"),
                    items=[
                        self.create_menu_item("Inicio", icons.HOME, "/home"),
                        self.create_menu_item("Datos", icons.TABLE_CHART, "/data"),
                        self.create_menu_item("Logs", icons.HISTORY, "/logs"),
                        PopupMenuItem(
                            content=Row([
                                Icon(icons.LOGOUT, size=17),
                                Text("Cerrar sesión")
                            ]),
                            on_click=lambda e: self.show_logout_dialog()
                        )
                    ]
                )
            )
        else:  # Versión escritorio
            actions.extend([
                self.create_icon_button("Inicio", icons.HOME, "/home"),
                self.create_icon_button("Datos", icons.TABLE_CHART, "/data"),
                self.create_icon_button("Logs", icons.HISTORY, "/logs"),
                IconButton(
                    icon=icons.LOGOUT,
                    icon_size=20,
                    icon_color="white",
                    tooltip="Cerrar sesión",
                    on_click=lambda e: self.show_logout_dialog()
                )
            ])
        
        # Email del usuario
        actions.append(
            Container(
                padding=10,
                content=Text(
                    self.get_user_email(),
                    color="white",
                    size=14,
                    weight="bold"
                )
            )
        )
        
        return actions
    
    def create_menu_item(self, text, icon, route):
        """Crea items del menú popup"""
        return PopupMenuItem(
            content=Row([
                Icon(icon, size=17, color="white"),
                Text(text, color="white")
            ]),
            on_click=lambda _: self.page.go(route)
        )
    
    def create_icon_button(self, tooltip, icon, route):
        """Crea botones para versión escritorio"""
        return IconButton(
            icon=icon,
            icon_size=20,
            icon_color="white",
            tooltip=tooltip,
            on_click=lambda _: self.page.go(route)
        )
    
    def get_user_email(self):
        """Obtiene el email del usuario de la sesión"""
        user_data = self.page.session.get("user")
        if user_data:
            email = user_data.get('email', 'usuario@dominio.com')
            return email.split('@')[0]  # Mostrar solo la parte antes del @
        return "Invitado"
    
    def show_logout_dialog(self):
        """Muestra el diálogo de confirmación"""
        self.page.dialog = self.dlg_modal
        self.dlg_modal.open = True
        self.page.update()
    
    def logout(self, e):
        """Cierra sesión y limpia datos"""
        self.page.session.clear()
        self.page.client_storage.clear()
        self.page.dialog = None
        self.page.go("/login")
        self.page.update()
    
    def close_dialog(self, e):
        """Cierra el diálogo de confirmación"""
        self.page.dialog = None
        self.page.update()